"""
This code defines a class which compiles a given TeX file into a PDF.
"""

# Standard imports.
import subprocess
from dataclasses import dataclass
from pathlib import Path

# Local imports.
from .constants import (
    DEFAULT_LATEX_COMMAND,
    DEFAULT_STEM,
    TEMP_STEM,
    TEX_EXT,
    PDF_EXT
)

##############
# MAIN CLASS #
##############

@dataclass
class TexCompiler:
    """ The class in question. """
    path_to_tex: str = DEFAULT_STEM+TEX_EXT
    path_to_output: str = TEMP_STEM+PDF_EXT
    latex_command: str = DEFAULT_LATEX_COMMAND
    preserve_tex: bool = False
    clean: bool = True

    def _compile_only(self):
        """ Compile TeX to PDF. """
        command = [self.latex_command, self.path_to_tex]
        subprocess.run(command, check=True)
        subprocess.run(command, check=True)

    def _move_output(self):
        """ Move the output to the desired destination. """
        path_obj_to_current_output = \
            Path.cwd()/(Path(self.path_to_tex).stem+PDF_EXT)
        path_obj_to_current_output.rename(self.path_to_output)

    def _clean(self):
        """ Remove the unused files generated by the compilation processes. """
        stem = Path(self.path_to_tex).stem
        for path_obj in Path.cwd().glob(stem+".*"):
            if self.preserve_tex and path_obj.suffix == TEX_EXT:
                pass
            else:
                path_obj.unlink()

    def compile(self):
        """ Compile AND clean. """
        self._compile_only()
        self._move_output()
        if self.clean:
            self._clean()

##################
# HELPER CLASSES #
##################

class TexCompilerError(Exception):
    """ A custom exception. """
